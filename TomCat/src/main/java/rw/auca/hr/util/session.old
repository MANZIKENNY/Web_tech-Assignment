package rw.auca.hr.util;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import java.util.List;

public class SessionManager {
    // Session attribute constants
    public static final String USER_ID = "userId";
    public static final String USERNAME = "username";
    public static final String ROLES = "roles";
    public static final String IS_AUTHENTICATED = "authenticated";
    
    // Create authenticated session
    public static void createAuthenticatedSession(HttpServletRequest request, int userId, 
                                                String username, List<String> roles) {
        // Invalidate any existing session
        HttpSession existingSession = request.getSession(false);
        if (existingSession != null) {
            existingSession.invalidate();
        }
        
        // Create new session and set timeout (30 minutes)
        HttpSession session = request.getSession(true);
        session.setMaxInactiveInterval(30 * 60);
        
        // Store essential authentication data
        session.setAttribute(USER_ID, userId);
        session.setAttribute(USERNAME, username);
        session.setAttribute(ROLES, roles);
        session.setAttribute(IS_AUTHENTICATED, true);
    }
    
    // Check if user is authenticated
    public static boolean isAuthenticated(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        return session != null && Boolean.TRUE.equals(session.getAttribute(IS_AUTHENTICATED));
    }
    
    // Check if user has specific role
    public static boolean hasRole(HttpServletRequest request, String requiredRole) {
        HttpSession session = request.getSession(false);
        if (session == null) return false;
        
        @SuppressWarnings("unchecked")
        List<String> roles = (List<String>) session.getAttribute(ROLES);
        return roles != null && roles.contains(requiredRole);
    }
    
    // Get current user ID
    public static Integer getUserId(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        return session != null ? (Integer) session.getAttribute(USER_ID) : null;
    }
    
    // Get current username
    public static String getUsername(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        return session != null ? (String) session.getAttribute(USERNAME) : null;
    }
    
    // Clear authentication
    public static void logout(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
    }
}
